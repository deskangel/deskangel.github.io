<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DeskAngel</title>
  
  <subtitle>DIG DEEPER, DO DIFFERENT</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.deskangel.com/"/>
  <updated>2020-05-05T23:30:30.043Z</updated>
  <id>https://blog.deskangel.com/</id>
  
  <author>
    <name>William Hsueh</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>开发机访问Android模拟器网络</title>
    <link href="https://blog.deskangel.com/2020/05/06/android-simulator-network-service/"/>
    <id>https://blog.deskangel.com/2020/05/06/android-simulator-network-service/</id>
    <published>2020-05-05T23:28:57.000Z</published>
    <updated>2020-05-05T23:30:30.043Z</updated>
    
    <content type="html"><![CDATA[<h3 id="模拟器网络"><a href="#模拟器网络" class="headerlink" title="模拟器网络"></a>模拟器网络</h3><p>这里说的模拟器，是 Google 官方模拟器。模拟器的网络是独立的，隐藏在虚拟路由器后面，使得模拟器可以通过开发机的网络接口，但是看不到开发机，当然也看不到开发机网络上的其他机器。</p><p>虚拟路由器管理的网络是 10.0.2/24，其中，10.0.2.1是网关，也就是虚拟路由器自己；10.0.2.2映射到开发机的127.0.0.1，模拟器要访问开发机的资源的话，就需要访问这个地址；10.0.2.15是模拟器自己的 ip，开发机访问模拟器就通过这个 ip。</p><h3 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h3><p>Android 开发文档提供了两种方式：使用模拟器控制台；使用 adb 工具。这两种方法都是用的端口转发的方式来通讯，但是 adb 的方式不能动态删除一条转发规则，所以这里不考虑。</p><h4 id="模拟器控制台端口"><a href="#模拟器控制台端口" class="headerlink" title="模拟器控制台端口"></a>模拟器控制台端口</h4><p>要使用模拟器控制台，首先需要确定模拟器的端口。使用 adb 命令<code>adb devices</code>，输出：</p><blockquote><p>List of devices attached<br>emulator-5554    device</p></blockquote><p>端口即为 <em>5554</em>。</p><p>使用 telnet 工具连接：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet localhost 5554</span><br></pre></td></tr></table></figure><p>telnet 工具有点老了，Windows 上默认是隐藏的，需要通过设置才可以使用，具体如何设置 Google 一下即可。</p><h4 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h4><p>连接上控制台后，会有提示说需要认证，并且认证的方法页在提示中说明了：</p><blockquote><p><code>~ telnet localhost 5554</code><br>Trying ::1…<br>Connected to localhost.<br>Escape character is ‘^]’.<br>Android Console: Authentication required<br>Android Console: type ‘auth <auth_token>‘ to authenticate<br>Android Console: you can find your <auth_token> in<br>‘/Users/username/.emulator_console_auth_token’<br>OK</p></blockquote><p>我用的是 macos，其他平台大同小异。找到<code>.emulator_console_auth_token</code>文件，把里面的字符串复制一下，然后直接输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auth gu9eE2s761qDJG4R</span><br></pre></td></tr></table></figure><p><code>gu9eE2s761qDJG4R</code>即为<code>.emulator_console_auth_token</code>文件中的<em>auth_token</em>。</p><p>认证后，输入<code>help</code>命令，会列出所有能在模拟器控制台中使用的命令。如果没有认证，那么只有几个基本命令可以使用。</p><h4 id="端口转发-1"><a href="#端口转发-1" class="headerlink" title="端口转发"></a>端口转发</h4><p>接下来使用<code>redir</code>命令添加端口转发规则。如果在模拟器上的服务使用的是 <em>8000</em> 端口，在开发机上随便选一个大于 <em>1024</em> 的端口进行转发（1024以下的端口需要权限）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redir add tcp:3000:8000</span><br></pre></td></tr></table></figure><p><code>redir</code>的使用语法是：<code>redia (tcp|udp):hostport:guestport</code>，支持 tcp 和 udp 协议的转发，后面第一个端口是开发机的端口，最后的是模拟器的端口。</p><p>所以，添加上面的转发规则后，要访问模拟器上<em>8000</em>端口的服务，在开发机上访问<code>localhost:3000</code>就可以了。</p><h4 id="redir-其他子命令"><a href="#redir-其他子命令" class="headerlink" title="redir 其他子命令"></a>redir 其他子命令</h4><p>在模拟器控制台运行 <code>redia</code> 命令，会显示能使用的子命令：</p><blockquote><p>available sub-commands:<br>    list             list current redirections<br>    add              add new redirection<br>    del              remove existing redirection</p></blockquote><ul><li>redir list: 查看当前设置的转发列表</li><li>redia add: 增加一条转发规则，用法<code>redia (tcp|udp):hostport:guestport</code></li><li>redia del: 删除一条转发规则，用法<code>redia (tcp|udp):hostport</code></li></ul><h4 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h4><p>其实就是退出<code>telnet</code>，直接输入<code>quit</code>或者<code>exit</code>命令就可以退出。也可以按照 telnet 提示，使用快捷键<code>ctrl~]</code>退到 telnet shell，再通过<code>ctrl+d</code>或者<code>quit</code>命令退出。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://developer.android.com/studio/run/emulator-networking" target="_blank" rel="noopener">Set up Android Emulator networking  |  Android Developers</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;模拟器网络&quot;&gt;&lt;a href=&quot;#模拟器网络&quot; class=&quot;headerlink&quot; title=&quot;模拟器网络&quot;&gt;&lt;/a&gt;模拟器网络&lt;/h3&gt;&lt;p&gt;这里说的模拟器，是 Google 官方模拟器。模拟器的网络是独立的，隐藏在虚拟路由器后面，使得模拟器可以通过开发机的
      
    
    </summary>
    
    
      <category term="Software" scheme="https://blog.deskangel.com/categories/Software/"/>
    
    
      <category term="android" scheme="https://blog.deskangel.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>build ubuntu 18.04 kernel</title>
    <link href="https://blog.deskangel.com/2020/05/05/build-ubuntu-18-04-kernel/"/>
    <id>https://blog.deskangel.com/2020/05/05/build-ubuntu-18-04-kernel/</id>
    <published>2020-05-05T02:50:19.000Z</published>
    <updated>2020-05-05T03:00:31.438Z</updated>
    
    <content type="html"><![CDATA[<p>虽然是在 Ubuntu 18.04 上的实验，但是其他版本应该也适用。</p><h3 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h3><h4 id="安装-linux-和-linux-image-依赖"><a href="#安装-linux-和-linux-image-依赖" class="headerlink" title="安装 linux 和 linux image 依赖"></a>安装 linux 和 linux image 依赖</h4><p><code>sudo apt-get build-dep linux linux-image-$(uname -r)</code></p><p>在能成功运行上面的命令之前，可能需要编辑<code>/etc/apt/sources.list</code>，把其中<code>deb-src</code>的行的注释都去掉，然后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><p>继续安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install linux-source kernel-package</span><br><span class="line">sudo apt-get install libncurses-dev</span><br></pre></td></tr></table></figure><h3 id="准备代码"><a href="#准备代码" class="headerlink" title="准备代码"></a>准备代码</h3><ul><li><p>进入 <code>/usr/src/linux-source-4.15.0</code>目录，其中，<code>linux-source-4.15.0</code> 也是当前 Ubuntu 18.04 默认使用的内核版本，这可以通过 <code>uname -r</code> 来进行确认。</p></li><li><p>解压缩文件<code>linux-source-4.15.0.tar.bz2</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tar jvcf linux-source-4.15.0.tar.bz2</span><br></pre></td></tr></table></figure></li><li><p>复制当前的配置文件到源码目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /boot/config-4.15.0-99-generic .config</span><br></pre></td></tr></table></figure></li><li><p>把上面复制的旧的配置文件应用到内核代码中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make oldconfig</span><br></pre></td></tr></table></figure></li><li><p>配置内核</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make menuconfig</span><br></pre></td></tr></table></figure><h3 id="编译内核"><a href="#编译内核" class="headerlink" title="编译内核"></a>编译内核</h3><p>运行下面的命令开始编译代码。其中，<code>deb-pkg</code> 参数会在<code>/usr/src/</code>下生成几个 deb 安装包，之后可以通过 <code>dpkg -i linux-*.deb</code> 来安装内核。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo make clean</span><br><span class="line">sudo make -j2 deb-pkg LOCALVERSION=-custom</span><br></pre></td></tr></table></figure><p><code>-custom</code>参数可以自己设定，会在内核版本后面添加该字符串，也就是运行<code>uname -r</code>看到的 generic 这样的字符串。</p><p>如果需要编译模块，可以运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo make modules</span><br><span class="line">sudo make modules_install</span><br></pre></td></tr></table></figure><p><code>make modules_install</code>是模块编译完成后进行安装到对应目录。</p><h3 id="安装内核"><a href="#安装内核" class="headerlink" title="安装内核"></a>安装内核</h3><p>编译好的内核文件默认放在上一级目录，共有4个 deb 文件。安装命令入下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">sudo dpkg -i linux-*.deb</span><br></pre></td></tr></table></figure><p>安装后，新的内核文件会出现在<code>/boot</code>目录下，同时<code>/boot/grub/menu.lst</code>中还会添加新的内核启动入口，在系统启动的时候按住<code>shift</code>键可以选择使用哪个内核，默认使用新内核。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://wiki.ubuntu.com/Kernel/BuildYourOwnKernel" target="_blank" rel="noopener">Kernel/BuildYourOwnKernel - Ubuntu Wiki</a></li><li><a href="https://www.linuxtopia.org/online_books/linux_kernel/kernel_configuration/re137.html" target="_blank" rel="noopener">Linux Kernel Configuration - LOCALVERSION</a></li><li><a href="https://debian-handbook.info/browse/stable/sect.kernel-compilation.html" target="_blank" rel="noopener">The Debian Administrator’s Handbook: 8.10. Compiling a Kernel</a></li><li><a href="https://help.ubuntu.com/lts/installation-guide/amd64/ch08s06.html" target="_blank" rel="noopener">Ubuntu Installation Guide: 8.6. Compiling a New Kernel</a></li><li><a href="https://askubuntu.com/questions/1056598/trying-to-build-kernel-on-18-04-no-editconfigs-option" target="_blank" rel="noopener">compiling - Trying to build kernel on 18.04. No editconfigs option - Ask Ubuntu</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;虽然是在 Ubuntu 18.04 上的实验，但是其他版本应该也适用。&lt;/p&gt;
&lt;h3 id=&quot;安装环境&quot;&gt;&lt;a href=&quot;#安装环境&quot; class=&quot;headerlink&quot; title=&quot;安装环境&quot;&gt;&lt;/a&gt;安装环境&lt;/h3&gt;&lt;h4 id=&quot;安装-linux-和-lin
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://blog.deskangel.com/categories/Programming/"/>
    
    
      <category term="linux" scheme="https://blog.deskangel.com/tags/linux/"/>
    
      <category term="ubuntu" scheme="https://blog.deskangel.com/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu 18.04 desktop不接显示器开启 vnc 服务</title>
    <link href="https://blog.deskangel.com/2020/05/02/vino-on-headless-ubuntu-desktop/"/>
    <id>https://blog.deskangel.com/2020/05/02/vino-on-headless-ubuntu-desktop/</id>
    <published>2020-05-02T12:07:08.000Z</published>
    <updated>2020-05-04T13:23:24.460Z</updated>
    
    <content type="html"><![CDATA[<p>Ubuntu 下如果没有接入显示器，vnc 会无法正常工作，所以需要做一些额外的操作来处理。</p><h3 id="配置-vino"><a href="#配置-vino" class="headerlink" title="配置 vino"></a>配置 vino</h3><p>Ubuntu使用vino来作为默认的vnc服务器，但是默认的设置需要进行一些修改，特别是<code>require-encryption</code>这个标志，macos自带的vnc客户的不支持它的加密方式。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gsettings <span class="built_in">set</span> org.gnome.Vino require-encryption <span class="literal">false</span></span><br><span class="line">gsettings <span class="built_in">set</span> org.gnome.Vino prompt-enabled <span class="literal">false</span></span><br><span class="line">gsettings <span class="built_in">set</span> org.gnome.Vino authentication-methods <span class="string">"['vnc']"</span></span><br><span class="line">gsettings <span class="built_in">set</span> org.gnome.Vino lock-screen-on-disconnect <span class="literal">false</span></span><br><span class="line">gsettings <span class="built_in">set</span> org.gnome.Vino vnc-password $(<span class="built_in">echo</span> -n <span class="string">"mypassword"</span>|base64)</span><br></pre></td></tr></table></figure><p>需要注意的是，不要用<code>sudo</code>来运行上面的命令，否则不但在ssh客户的操作时会有警告，而且修改的也不是当前的配置。</p><h3 id="自动启动-vino-server"><a href="#自动启动-vino-server" class="headerlink" title="自动启动 vino server"></a>自动启动 vino server</h3><p>随用户登录后，自动启动 vino server。编辑一个 vino-server.desktop 文件，如果 autostart 目录不存在，就创建一个。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim ~/.config/autostart/vino-server.desktop</span><br></pre></td></tr></table></figure><p>填入如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Type&#x3D;Application</span><br><span class="line">Name&#x3D;Vino VNC server</span><br><span class="line">Exec&#x3D;&#x2F;usr&#x2F;lib&#x2F;vino&#x2F;vino-server</span><br><span class="line">NoDisplay&#x3D;true</span><br></pre></td></tr></table></figure><p>vino-server 不能在 console 中运行，所以需要在用户登录到桌面后用这样的方式自动启动。</p><h3 id="安装-video-dummy"><a href="#安装-video-dummy" class="headerlink" title="安装 video-dummy"></a>安装 video-dummy</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install xserver-xorg-video-dummy</span><br></pre></td></tr></table></figure><h3 id="配置-dummy-显示器"><a href="#配置-dummy-显示器" class="headerlink" title="配置 dummy 显示器"></a>配置 dummy 显示器</h3><p>在<code>/etc/X11</code>下创建 xorg.conf 文件，填写分辨率等信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/X11/xorg.conf</span><br></pre></td></tr></table></figure><p>填写如下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">Section <span class="string">"Monitor"</span></span><br><span class="line">Identifier <span class="string">"Monitor0"</span></span><br><span class="line">HorizSync 28.0-80.0</span><br><span class="line">VertRefresh 48.0-75.0</span><br><span class="line"><span class="comment"># 1024x768 @ 60.00 Hz (GTF) hsync: 47.70 kHz; pclk: 64.11 MHz</span></span><br><span class="line"><span class="comment"># Modeline "1024x768_60.00" 64.11 1024 1080 1184 1344 768 769 772 795 -HSync +Vsync</span></span><br><span class="line"><span class="comment"># 1280x720 @ 60.00 Hz (GTF) hsync: 44.76 kHz; pclk: 74.48 MHz</span></span><br><span class="line"><span class="comment"># Modeline "1280x720_60.00" 74.48 1280 1336 1472 1664 720 721 724 746 -HSync +Vsync</span></span><br><span class="line"><span class="comment"># 1368x768 @ 60.00 Hz (GTF) hsync: 47.70 kHz; pclk: 85.86 MHz</span></span><br><span class="line"><span class="comment"># Modeline "1368x768_60.00" 85.86 1368 1440 1584 1800 768 769 772 795 -HSync +Vsync</span></span><br><span class="line"><span class="comment"># 1600x900 @ 60.00 Hz (GTF) hsync: 55.92 kHz; pclk: 119.00 MHz</span></span><br><span class="line"><span class="comment"># Modeline "1600x900_60.00" 119.00 1600 1696 1864 2128 900 901 904 932 -HSync +Vsync</span></span><br><span class="line"><span class="comment"># 1920x1080 @ 60.00 Hz (GTF) hsync: 67.08 kHz; pclk: 172.80 MHz</span></span><br><span class="line">Modeline <span class="string">"1920x1080_60.00"</span> 172.80 1920 2040 2248 2576 1080 1081 1084 1118 -HSync +Vsync</span><br><span class="line">EndSection</span><br><span class="line"></span><br><span class="line">Section <span class="string">"Device"</span></span><br><span class="line">Identifier <span class="string">"Card0"</span></span><br><span class="line">Option <span class="string">"NoDDC"</span> <span class="string">"true"</span></span><br><span class="line">Option <span class="string">"IgnoreEDID"</span> <span class="string">"true"</span></span><br><span class="line">Driver <span class="string">"dummy"</span></span><br><span class="line">EndSection</span><br><span class="line"></span><br><span class="line">Section <span class="string">"Screen"</span></span><br><span class="line">DefaultDepth 16</span><br><span class="line">Identifier <span class="string">"Screen0"</span></span><br><span class="line">Device <span class="string">"Card0"</span></span><br><span class="line">Monitor <span class="string">"Monitor0"</span></span><br><span class="line">    SubSection <span class="string">"Display"</span></span><br><span class="line">    Depth 16</span><br><span class="line">    Modes <span class="string">"1920x1080"</span></span><br><span class="line">    EndSubSection</span><br><span class="line">EndSection</span><br></pre></td></tr></table></figure><h3 id="配置用户自动登录桌面"><a href="#配置用户自动登录桌面" class="headerlink" title="配置用户自动登录桌面"></a>配置用户自动登录桌面</h3><p>查看当前用的是什么管理器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/X11/default-display-manager</span><br></pre></td></tr></table></figure><p>我的是<code>/usr/sbin/gdm3</code>，那么编辑文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/gdm3/custom.conf</span><br></pre></td></tr></table></figure><p>把下面三行的注释去掉，其中<code>AutomaticLogin</code>行修改成自己的用户名。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">WaylandEnable=<span class="literal">false</span></span><br><span class="line">AutomaticLoginEnable = <span class="literal">true</span></span><br><span class="line">AutomaticLogin = username</span><br></pre></td></tr></table></figure><p>重启电脑，就可以登录了。</p><h3 id="重启桌面"><a href="#重启桌面" class="headerlink" title="重启桌面"></a>重启桌面</h3><p>我通过 macos 的 <code>Screen Sharing.app</code> 用 vnc 协议来连接，查看 Ubuntu 的 Settings 的时候每次都会 crash，据说是 nvidia 的驱动问题，但是我没有深究，有兴趣的可以研究。</p><p>crash 后，vino-server 就退出了，要再次启动的话，需要重启桌面管理。Ubuntu 18.04下，只需要运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart display-manager</span><br></pre></td></tr></table></figure><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>这样配置后，如果再次接上显示器后，显示器会黑屏，这时候，需要把<code>/etc/X11/xorg.conf</code>删除或者改名，比如改成<code>/etc/X11/xorg.conf.dummy</code>，然后重启显示管理器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart display-manager</span><br></pre></td></tr></table></figure><p>即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Ubuntu 下如果没有接入显示器，vnc 会无法正常工作，所以需要做一些额外的操作来处理。&lt;/p&gt;
&lt;h3 id=&quot;配置-vino&quot;&gt;&lt;a href=&quot;#配置-vino&quot; class=&quot;headerlink&quot; title=&quot;配置 vino&quot;&gt;&lt;/a&gt;配置 vino&lt;/h3
      
    
    </summary>
    
    
      <category term="Software" scheme="https://blog.deskangel.com/categories/Software/"/>
    
    
      <category term="ubuntu" scheme="https://blog.deskangel.com/tags/ubuntu/"/>
    
      <category term="vnc" scheme="https://blog.deskangel.com/tags/vnc/"/>
    
      <category term="vino" scheme="https://blog.deskangel.com/tags/vino/"/>
    
  </entry>
  
  <entry>
    <title>DaFileShare macos 版本介绍</title>
    <link href="https://blog.deskangel.com/2020/04/26/dafileshare-macos-version-how-to/"/>
    <id>https://blog.deskangel.com/2020/04/26/dafileshare-macos-version-how-to/</id>
    <published>2020-04-26T11:47:25.000Z</published>
    <updated>2020-04-26T12:29:27.989Z</updated>
    
    <content type="html"><![CDATA[<p>DaFileShare 主要用来在电脑和手机之间进行文件分享。手机端无需下载任何软件，通过浏览器就可以接收文件。</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>启动 App</p><p><img src="/images/dfs_empty.png" alt="启动后.png"></p><p>把需要分享的文件拖动到窗口中，App 会生成分享的链接和二维码。</p><p><img src="/images/dfs_sharing.png" alt="42419761.png"></p><p>复制链接，发送给接收的人员即可下载。如果手机浏览器支持扫描二维码，也可以直接扫描二维码进行下载。</p><h1 id="Download"><a href="#Download" class="headerlink" title="Download"></a>Download</h1><p>你可以下载 <a href="https://github.com/deskangel/DaFileShare/releases/download/v1.1/DaFileShare.app.zip" target="_blank" rel="noopener">DaFileShare</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;DaFileShare 主要用来在电脑和手机之间进行文件分享。手机端无需下载任何软件，通过浏览器就可以接收文件。&lt;/p&gt;
&lt;h1 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h1&gt;&lt;p&gt;启动 App
      
    
    </summary>
    
    
      <category term="Software" scheme="https://blog.deskangel.com/categories/Software/"/>
    
    
      <category term="dafileserver" scheme="https://blog.deskangel.com/tags/dafileserver/"/>
    
  </entry>
  
  <entry>
    <title>私人日记 P.Diary</title>
    <link href="https://blog.deskangel.com/2020/04/25/p-diary/"/>
    <id>https://blog.deskangel.com/2020/04/25/p-diary/</id>
    <published>2020-04-25T02:41:21.000Z</published>
    <updated>2020-05-05T03:00:53.168Z</updated>
    
    <content type="html"><![CDATA[<p>P.Diary就是 Personal Diary 的意思。</p><p>之前用 iPhone 的时候，记点私人的感悟什么的，都用的是 Momento，但是换到 Android 手机后，就再也没有找到一个很好的日记软件，大部分都是游记，强调的是图文，社交，这些都不适合我。我只是想安安静静地写个日记，留待老了可以做在炉火旁摇椅上慢慢地读。</p><p>P.Diary 就是在这样的想法下产生的。它有这样一些特点：</p><h3 id="一-纯粹"><a href="#一-纯粹" class="headerlink" title="一. 纯粹"></a>一. 纯粹</h3><p>没有很多功能，就是一个传统意义上的日记软件，只是数字化而已。以<code>文字记录</code>为主，<code>天气和心情</code>用系统自带的 emoji，尽量不引入不必要的资源和功能。</p><h3 id="二-私人"><a href="#二-私人" class="headerlink" title="二. 私人"></a>二. 私人</h3><p>这是开发中很重要的一个考虑点。推己及人，如果是别人开发这样一个软件，做到什么样我才会放心的使用它来记录一些私人甚至私密的生活感受和感悟？</p><p>出于这样的考虑，这是一款纯<code>单机</code>的 App，特意避免任何的网络请求，包括云端存储。</p><p>日记保存是通过导出文件的方式进行存放，虽然比起云端存放多了一点麻烦，但是更让人安心。</p><h3 id="三-安全"><a href="#三-安全" class="headerlink" title="三. 安全"></a>三. 安全</h3><p>安全方面，除了用登录密码做一个入口的安全检查外，每一篇日记都可以选择是否进行加密。而加密的日记会在列表中以<code>模糊</code>的方式显示，这是考虑到万一需要在非私密环境下打开 App，不会把一些需要隐藏的文字暴露给外人。</p><p>加密后的日记，在导出后的文件中也是加密的，可以安全存放在云盘上，比如 DropBox 或者 Google Drive。如果手机安装了这些软件，可以在导出后的提示框中直接把文件分享过去进行存放，相当方便。</p><h3 id="四-图片"><a href="#四-图片" class="headerlink" title="四. 图片"></a>四. 图片</h3><p>图片功能我也一直在考虑，主要是两个问题：</p><ol><li>是否有必要。一开始的设想是没有必要，图片的记录就使用专门图片记录的 App 好了，比如 Google  相册 App，无限容量不说，还有很多其他功能。不过有时候也会有一些和文字强相关的图片想放在日记里，就又觉得或许有必要增加这个功能。</li><li>如何存放的问题。是原图存放，还是进行压缩裁剪。原图存放很容易使得数据变大，压缩裁剪又会增加额外操作，毕竟图片只是一个辅助的作用，不想在上面开发很多功能。</li></ol><h3 id="五-平台"><a href="#五-平台" class="headerlink" title="五. 平台"></a>五. 平台</h3><p>iOS 和 macos 也是支持的，已经开发完成。但是由于个人没有申请账号，所有没有发布出来。或许等以后开发的 App 多了之后会一起上架吧，比较上架 Apple App Store 比较麻烦，怕了。</p><h3 id="六-定价"><a href="#六-定价" class="headerlink" title="六. 定价"></a>六. 定价</h3><p>不喜欢订阅等方式，采用的是一次性定价，设定的是Google play 商店的最低价。</p><p>现在还写日记的人应该是非常少了，写私密日记的更是凤毛麟角，理论上应该把定价定得很高才是——但人有时候就是这么任性！</p><p>如果你觉得这个日记 App 有点符合你的需要，随时可以发邮件向我要兑换码，不需要有任何压力。</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>Google play store 的下载地址：<br><a href="https://play.google.com/store/apps/details?id=com.deskangel.personal_diary" target="_blank" rel="noopener">P.Diary - Apps on Google Play</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;P.Diary就是 Personal Diary 的意思。&lt;/p&gt;
&lt;p&gt;之前用 iPhone 的时候，记点私人的感悟什么的，都用的是 Momento，但是换到 Android 手机后，就再也没有找到一个很好的日记软件，大部分都是游记，强调的是图文，社交，这些都不适合我。我
      
    
    </summary>
    
    
      <category term="Software" scheme="https://blog.deskangel.com/categories/Software/"/>
    
    
      <category term="P.Diary" scheme="https://blog.deskangel.com/tags/P-Diary/"/>
    
  </entry>
  
  <entry>
    <title>DaFileShare 开发笔记</title>
    <link href="https://blog.deskangel.com/2020/04/20/dafileserver-dev-notes/"/>
    <id>https://blog.deskangel.com/2020/04/20/dafileserver-dev-notes/</id>
    <published>2020-04-20T06:06:16.000Z</published>
    <updated>2020-05-02T12:16:24.519Z</updated>
    
    <content type="html"><![CDATA[<p>一直以来都觉得电脑分享文件到手机上比较麻烦，试过不少软件，不是收费很贵就是不太方便，至于通过 USB 线——感觉这个更不方便。每次通过微信，QQ 之类的 IM 传了文件之后，就想要开发一个简单的文件分享工具。</p><p>DaFileShare 的代码很简单，分成两个部分：</p><ul><li>Command line 的 http server 提供文件分享功能</li><li>Mac App 对其进行封装，提供拖放支持</li></ul><p>开发 DaFileShare 之前没有做过 Mac App 的开发，也没有接触过 Swift，一切都是新学，所以记一下Mac App的开发过程，以及遇到的问题，至于 Command line 部分，没有什么好讲的。</p><p>第一个遇到的问题就是<code>拖放</code>。</p><h3 id="拖放"><a href="#拖放" class="headerlink" title="拖放"></a>拖放</h3><p>Macos 的拖放是通过剪切板实现的，首先App需要注册拖放的类型。第一个纠结的问题是：在哪里注册？</p><p>参考了网上的文章和 Apple 的开发文档，NSView 提供了拖放的支持，但是还需要进行一些处理。经过测试，<code>awakFromNib</code> 是一个很好的入口，哪怕用的是<code>StoryBoard</code>，一样会进入这个函数。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">awakeFromNib</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.awakeFromNib()</span><br><span class="line">    <span class="keyword">self</span>.registerForDraggedTypes([<span class="type">NSPasteboard</span>.<span class="type">PasteboardType</span>.fileURL])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为新手的原因，不知道如何把 NSView 类和 StoryBoard，Google 了很久也没有任何发现，直到后来看到 <code>identity inspector</code> 下的 <code>Custom Class</code>，尝试着把 StoryBoard 中的 view 的类改为自己的类才算成功。</p><h4 id="获取拖放的数据"><a href="#获取拖放的数据" class="headerlink" title="获取拖放的数据"></a>获取拖放的数据</h4><p>可能是因为 Swift 的快速发展，网上一些文章已经过时，获取剪切板数据的方法在 Xcode 11.4.1 下已经失效了。下面是可以工作的代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">performDragOperation</span><span class="params">(<span class="number">_</span> sender: NSDraggingInfo)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> pboard = sender.draggingPasteboard</span><br><span class="line">    <span class="keyword">let</span> dragTypes = pboard.types! <span class="keyword">as</span> <span class="type">NSArray</span></span><br><span class="line">    <span class="keyword">if</span> dragTypes.<span class="built_in">contains</span>(<span class="type">NSPasteboard</span>.<span class="type">PasteboardType</span>.fileURL) &#123;</span><br><span class="line">        <span class="keyword">let</span> files = pboard.propertyList(forType: <span class="type">NSPasteboard</span>.<span class="type">PasteboardType</span>(rawValue: <span class="string">"NSFilenamesPboardType"</span>)) <span class="keyword">as</span>! [<span class="type">String</span>]</span><br><span class="line">        <span class="keyword">let</span> numberOfFiles = files.<span class="built_in">count</span></span><br><span class="line">        <span class="keyword">if</span> numberOfFiles &gt; <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> filePath = files[<span class="number">0</span>] <span class="keyword">as</span> <span class="type">String</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> delegate = <span class="keyword">self</span>.delegate &#123;</span><br><span class="line">                <span class="type">NSLog</span>(<span class="string">"file path \(filePath)"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h3><p>第二个遇到的大问题是关闭：view 的关闭，窗口的关闭，App 的关闭。<br>由于想在退出 App 的时候进行一些处理，特别是 Command line 的 http server 进程的关闭，结果就遇到问题了。</p><h4 id="同步关闭"><a href="#同步关闭" class="headerlink" title="同步关闭"></a>同步关闭</h4><p>首先，点击窗口上的关闭按钮后，只是关闭了窗口，但是 App 没有退出。再次点击 Dock 上的 App 图标，也没有像其他应用一样再次打开窗口，而是没有任何反应。<br>因为我不需要再打开窗口，只需要同步关闭，这个比较好处理，在 <code>AppDelegate</code> 中加一个函数即可：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">applicationShouldTerminateAfterLastWindowClosed</span><span class="params">(<span class="number">_</span> sender: NSApplication)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="不同的关闭方式"><a href="#不同的关闭方式" class="headerlink" title="不同的关闭方式"></a>不同的关闭方式</h4><p>然后，只需要找个地方同一处理关闭事件就好了吧？——然而并不是！<br>正常的关闭方式有三种：关闭按钮，菜单Quit，Cmd+Q。三种方式，三个表现形式！！</p><hr><h5 id="关闭按钮"><a href="#关闭按钮" class="headerlink" title="关闭按钮"></a>关闭按钮</h5><p>窗口上的关闭按钮可能是最正常的方式了。点击后，<code>ViewController</code> 的 <code>viewDidDisappear</code> 被调用，但是如果你在 <code>AppDelegate</code> 有写<br><code>applicationShouldTerminate</code> 函数，你会发现这个函数关闭没有调用到。</p><h5 id="菜单-Quit"><a href="#菜单-Quit" class="headerlink" title="菜单 Quit"></a>菜单 Quit</h5><p>通过菜单——不管是 Dock 上的菜单还是菜单栏上——的Quit，<code>applicationShouldTerminate</code> 被调用到了，但是，<code>viewDidDisappear</code> 没有调用。</p><h5 id="Cmd-Q"><a href="#Cmd-Q" class="headerlink" title="Cmd+Q"></a>Cmd+Q</h5><p>一句话，什么都不调用！！</p><hr><p>通过查阅资料，是因为在”macOS 10.6”中引入了一个叫做<code>Sudden Termination</code>的机制来快速关闭 App。由于刚开始接触 macos 开发，不想一开始就钻研太深，还是尽早把 App 实现才是正事，所以只看了如何关闭这个机制。没错，这个<code>Sudden Termination</code>可以关闭，只需要一行代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">applicationDidFinishLaunching</span><span class="params">(<span class="number">_</span> aNotification: Notification)</span></span> &#123;</span><br><span class="line">    <span class="comment">// Insert code here to initialize your application</span></span><br><span class="line">    <span class="type">ProcessInfo</span>.processInfo.disableSuddenTermination()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，这三种关闭方式都会调用到<code>applicationShouldTerminate</code>和<code>viewDidDisappear</code>，选一个地方处理就可以。我是在<code>viewDidDisappear</code>中进行处理，因为主要的逻辑代码在<code>ViewController</code>中。</p><h5 id="异常关闭"><a href="#异常关闭" class="headerlink" title="异常关闭"></a>异常关闭</h5><p>异常关闭有两种：一种是程序出现 Exception 导致退出的，一种是被 kill 掉。</p><p>根据 Windows 上的经验，第一种应该有一个全局处理比如“unCaughtException” 这样的函数来处理，但是我没有尝试；第二种应该是需要捕获 signal 来处理，我尝试了但是没有成功，于是为了省事，把 kill signal屏蔽掉了：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">applicationDidFinishLaunching</span><span class="params">(<span class="number">_</span> aNotification: Notification)</span></span> &#123;</span><br><span class="line">    <span class="comment">// Insert code here to initialize your application</span></span><br><span class="line">    <span class="type">ProcessInfo</span>.processInfo.disableSuddenTermination()</span><br><span class="line"></span><br><span class="line">    signal(<span class="type">SIGTERM</span>, <span class="type">SIG_IGN</span>) <span class="comment">// ignore the termination signal</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h3><p>Xcode 11.4.1，Swift 5，macos 10.15.4</p><h3 id="Download"><a href="#Download" class="headerlink" title="Download"></a>Download</h3><p>你可以下载 <a href="https://github.com/deskangel/DaFileShare/releases/download/v1.1/DaFileShare.app.zip" target="_blank" rel="noopener">DaFileShare</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一直以来都觉得电脑分享文件到手机上比较麻烦，试过不少软件，不是收费很贵就是不太方便，至于通过 USB 线——感觉这个更不方便。每次通过微信，QQ 之类的 IM 传了文件之后，就想要开发一个简单的文件分享工具。&lt;/p&gt;
&lt;p&gt;DaFileShare 的代码很简单，分成两个部分
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://blog.deskangel.com/categories/Programming/"/>
    
    
      <category term="dafileserver" scheme="https://blog.deskangel.com/tags/dafileserver/"/>
    
  </entry>
  
  <entry>
    <title>Build EOS on ubuntu 16.04</title>
    <link href="https://blog.deskangel.com/2018/03/31/build-eos-on-ubuntu-16-04/"/>
    <id>https://blog.deskangel.com/2018/03/31/build-eos-on-ubuntu-16-04/</id>
    <published>2018-03-31T11:55:07.000Z</published>
    <updated>2020-04-20T08:45:01.955Z</updated>
    
    <content type="html"><![CDATA[<p>为了和官方测试链对接，选择的是<code>dawn-2.x</code>分支。官方推荐的是在<code>Ubuntu 16.10</code>上面编译，但是我只有16.04，想来应该是差不多的。</p><p>参考<a href="https://github.com/EOSIO/eos/blob/DAWN-2018-02-14/README.md" target="_blank" rel="noopener">官方文档</a>，直接开干。</p><h4 id="第一个坑"><a href="#第一个坑" class="headerlink" title="第一个坑"></a>第一个坑</h4><p>第一个坑其实是关于git的，具体一点就是关于git的子模块的。如果在命令行checkout dawn-2.x分支，一定不要忘了在子模块不会自动切换分支。而且，手动切换后，也会留下一堆<code>Untracked files</code>，我是直接没管。</p><h4 id="第二个坑"><a href="#第二个坑" class="headerlink" title="第二个坑"></a>第二个坑</h4><p>一开始自然是使用自动编译脚本<code>./build.sh ubuntu</code>。前面的下载和配置都没有报错，直到编译的时候，提示找不到<code>clang</code>，而且是<code>opt/wasm/bin/</code>下找不到。这好办，找到<code>/usr/bin/clang-4.0</code>，在<code>opt/wasm/bin/</code>下创建个链接就好</p><h4 id="第三个坑"><a href="#第三个坑" class="headerlink" title="第三个坑"></a>第三个坑</h4><p>然后<code>make -j4</code>，还是提示错误，仔细一看，是<code>binaryen</code>没有。处理第一个坑的时候，明明看到<code>binaryen</code>明晃晃的躺在<code>opt/</code>目录下，怎么没有了？进去一看，居然是空的！！</p><p>把<a href="https://github.com/EOSIO/eos/blob/DAWN-2018-02-14/README.md#ubuntu" target="_blank" rel="noopener">官方文档</a>翻到手动编译部分，找到<code>binaryen</code>的github地址，开始clone，只是速度非常慢。过了一段时间，一看已经失败了。提示错误信息：</p><blockquote><blockquote><p>error: RPC failed; curl 18 transfer closed with outstanding read data remaining<br>fatal: The remote end hung up unexpectedly<br>fatal: early EOF</p></blockquote></blockquote><p>Google之后，网友们会告诉你，这是缓存不够的原因。设置下git的配置 <code>git config --global http.postBuffer 524288000</code>，把缓存加大。而我修改了这个设置之后，又设置了http代理，几秒钟就把代码拉下来了。</p><p>大概也就遇到了这两个问题，应该说还算是比较顺利的。文档上说要下载<code>secp256k1-zkp</code>，然后我找了下，自动化脚本应该没有下载，而我也没有手动去下，并没有影响到编译和运行。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;为了和官方测试链对接，选择的是&lt;code&gt;dawn-2.x&lt;/code&gt;分支。官方推荐的是在&lt;code&gt;Ubuntu 16.10&lt;/code&gt;上面编译，但是我只有16.04，想来应该是差不多的。&lt;/p&gt;
&lt;p&gt;参考&lt;a href=&quot;https://github.com/EO
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://blog.deskangel.com/categories/Programming/"/>
    
    
      <category term="eos" scheme="https://blog.deskangel.com/tags/eos/"/>
    
      <category term="blockchain" scheme="https://blog.deskangel.com/tags/blockchain/"/>
    
  </entry>
  
  <entry>
    <title>custom-eui-control-in-egret</title>
    <link href="https://blog.deskangel.com/2017/09/21/custom-eui-control-in-egret/"/>
    <id>https://blog.deskangel.com/2017/09/21/custom-eui-control-in-egret/</id>
    <published>2017-09-21T13:43:53.000Z</published>
    <updated>2020-04-20T08:45:01.959Z</updated>
    
    <content type="html"><![CDATA[<p>如何创建一个 eui 的控件，在 egret 的文档中是比较零散的，而且有些东西也没有讲到。这里提供一个比较完整的范例。</p><ol><li>创建一个 exml 文件，用来定义控件的显示元素，这里要注意的<code>classname</code> 的设置，比如设置成 <code>game.CustomButton</code>。game 为模块名（文档上也称呼为命名空间），后面需要用到。</li><li>创建一个 ts 文件，用来处理控件的逻辑。这个 ts 文件里面需要有模块，比如：<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> game &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> CustomButton <span class="keyword">extends</span> eui.Button &#123;</span><br><span class="line">        <span class="keyword">public</span> rtQuality: eui.Rect;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">super</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.skinName = <span class="string">"resource/skins/custom/EquipButtonSkin.exml"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">set</span> quality(color: <span class="built_in">number</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.rtQuality) &#123;</span><br><span class="line">                <span class="keyword">this</span>.rtQuality.strokeColor = color;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> label = <span class="keyword">this</span>.labelDisplay <span class="keyword">as</span> eui.Label;</span><br><span class="line">            label.textColor = color;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">get</span> quality(): <span class="built_in">number</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.rtQuality) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.rtQuality.strokeColor;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0x444444</span>;</span><br><span class="line">        &#125;      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在其他皮肤中使用的时候，可以从组件列表（COMPONENT/Custom)中直接拖动控件来使用，在 wing 4.03 版本中需要修改一下<code>Category Properties</code>中的 Skin，这应该是 wing 的一个 bug。</li><li>看一下 exml 的 Source，会发现添加了两个东西。一个是根节点的 <code>&lt;e:Skin ......... xmlns:game=&quot;game.*&quot; &gt;</code>；另一个是添加的控件的 tag 是 <code>&lt;game:CustomButton .....&gt;</code><br>关于这一点，可以<a href="http://developer.egret.com/cn/github/egret-docs/extension/EUI/advancedSkills/useComponents/index.html" target="_blank" rel="noopener">参考文档</a>。</li><li>在 ts 文件中使用的时候和普通的按钮一样，只是类型需要设置成 <code>game.CustomButton</code>。 </li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;如何创建一个 eui 的控件，在 egret 的文档中是比较零散的，而且有些东西也没有讲到。这里提供一个比较完整的范例。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建一个 exml 文件，用来定义控件的显示元素，这里要注意的&lt;code&gt;classname&lt;/code&gt; 的设置，比如设置成
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://blog.deskangel.com/categories/Programming/"/>
    
    
      <category term="egret" scheme="https://blog.deskangel.com/tags/egret/"/>
    
  </entry>
  
  <entry>
    <title>乐动力“网络不给力”问题的处理</title>
    <link href="https://blog.deskangel.com/2016/10/01/ledongli-login-issue-workaround/"/>
    <id>https://blog.deskangel.com/2016/10/01/ledongli-login-issue-workaround/</id>
    <published>2016-09-30T16:58:41.000Z</published>
    <updated>2020-04-20T08:45:01.955Z</updated>
    
    <content type="html"><![CDATA[<p>MX5上的乐动力 App 很早以前就不能登录了，各种途径都是提示“网络不给力”，等了大半年看他们是否会修正这个问题，但是每次版本更新后都试了，问题依旧存在。而且，无论是官网还是 App或是微博客服，都没有提供相关的说明该如何操作。<br>为了不丢失数据，只好自己动手了。</p><p>进入 Flyme 5 的访客系统，安装微信和乐动力 App，测试登录正常，之前的数据也能正常同步下来。</p><h4 id="第一步，祭出-Charles-看看都干了啥"><a href="#第一步，祭出-Charles-看看都干了啥" class="headerlink" title="第一步，祭出 Charles 看看都干了啥"></a>第一步，祭出 Charles 看看都干了啥</h4><p>启动 Charles，然后在手机上设置代理，进行登录，发现一个正常的登录主要做了几个操作：</p><ol><li>adduser，发送一个 pc 串，返回一个临时的 id</li><li>authbywechat，登录请求，url参数 uid 为之前请求的临时 id，返回用户 id</li><li>getinfo，获得用户相关信息，包括头像 url</li><li>updatewechatinfo，更新数据</li><li>updateinfo，更新数据</li></ol><h4 id="第二步，进入正常的系统，看看无法登录的版本都做了些什么"><a href="#第二步，进入正常的系统，看看无法登录的版本都做了些什么" class="headerlink" title="第二步，进入正常的系统，看看无法登录的版本都做了些什么"></a>第二步，进入正常的系统，看看无法登录的版本都做了些什么</h4><ol><li>authbywechat，url参数 uid 为<strong>残留的用户 id</strong>，返回 {“errorCode”: -10001, “ret”: “auth fail”}</li></ol><p>返回错误后就没有后续请求了。</p><p>现在看来就是验证的时候的 uid 的问题。查看反编译后的代码的时候发现，登录成功后这个 uid 是会被覆盖的。这样的话，给 App 一些正常的数据，让他先登录成功一次，以后理论上就不会有问题了。</p><p>如果是 root 的设备，直接把 SharedPreferences 中的 uid 的值改为0，App 就会进入 adduser 的流程，这样会比较简单。我不想 root 这个设备，所以写了些代码来模拟登录的流程。</p><h4 id="第三部，拦截请求，修改数据"><a href="#第三部，拦截请求，修改数据" class="headerlink" title="第三部，拦截请求，修改数据"></a>第三部，拦截请求，修改数据</h4><p>把正常登录的数据保存下来，在拦截到请求后把这些数据返回给 App。可能这部分也可以在 Charles 中完成，不过我修改了 hosts 文件，然后直接写了些 php 代码：<br>hosts 文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 walk.ledongli.cn</span><br></pre></td></tr></table></figure><p>路由部分：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Route::post(<span class="string">'/v2/rest/users/authbywechat'</span>, <span class="string">'MsgController@handleAuthWeChat'</span>);</span><br><span class="line">Route::post(<span class="string">'/v2/rest/users/getinfo'</span>, <span class="string">'MsgController@handleGetInfo'</span>);</span><br><span class="line">Route::post(<span class="string">'/v2/rest/users/updatewechatinfo'</span>, <span class="string">'MsgController@handleUpdateWeChatInfo'</span>);</span><br><span class="line">Route::post(<span class="string">'/v2/rest/users/updateinfo'</span>, <span class="string">'MsgController@handleUpdateInfo'</span>);</span><br></pre></td></tr></table></figure><p>响应部分(uid 和部分返回值删除了）：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handleUpdateWeChatInfo</span><span class="params">(Request $request)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> response()-&gt;json([<span class="string">"errorCode"</span> =&gt; <span class="number">0</span>, <span class="string">"ret"</span> =&gt; <span class="keyword">null</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handleUpdateInfo</span><span class="params">(Request $request)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> response()-&gt;json([<span class="string">"errorCode"</span> =&gt; <span class="number">0</span>, <span class="string">"ret"</span> =&gt; <span class="keyword">null</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handleAuthWeChat</span><span class="params">(Request $request)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> response()-&gt;json([<span class="string">"errorCode"</span> =&gt; <span class="number">0</span>, <span class="string">"ret"</span> =&gt; [<span class="string">"uid"</span> =&gt; xxxxxxxxxx]]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handleGetInfo</span><span class="params">(Request $request)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> response()-&gt;json([<span class="string">"errorCode"</span> =&gt; <span class="number">0</span>, <span class="string">"ret"</span> =&gt; [<span class="string">"target"</span> =&gt; , <span class="string">"weight"</span> =&gt; <span class="string">""</span>, <span class="string">"gender"</span> =&gt; <span class="string">"m"</span>, <span class="string">"checkined"</span> =&gt; , <span class="string">"checkin_mcount"</span> =&gt; , <span class="string">"birthdate"</span> =&gt; <span class="string">""</span>, <span class="string">"height"</span> =&gt; <span class="string">""</span>, <span class="string">"is_wechat"</span> =&gt; <span class="keyword">true</span>, <span class="string">"avatar"</span> =&gt; <span class="string">""</span>, <span class="string">"is_qq"</span> =&gt; <span class="keyword">false</span>, <span class="string">"is_sina"</span> =&gt; <span class="keyword">false</span>, <span class="string">"nickname"</span> =&gt; <span class="string">""</span>, <span class="string">"email"</span> =&gt; <span class="string">""</span>, <span class="string">"is_email"</span> =&gt; <span class="keyword">false</span>]]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>登录进入 App 之后，把 hosts 文件还原，去掉手机上 wifi 的代理，再在 App 中点击<code>立即备份数据</code>，可以看到开始正常备份了。</p><h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><ul><li>之所以出现这个问题，是因为残留的 uid 去请求登录的时候会导致失败。可能的原因大概是某一个版本的登录逻辑改变了，但是没有处理好老版本的兼容性。其实哪怕多加一个按钮能重置一下用于登录的临时 id 也好啊。</li><li>同步的时候也出现了问题，同步一两条数据后就会卡住不动，不会自动重新开始，需要用户反复的进行操作才能把所有的数据同步完。</li><li>退出登录的时候，居然<strong>真的</strong>把用户的数据删除了。</li></ul><p>综合来看，乐动力这个 App 在这部分上设计得是比较烂的，可能只是一个临时的外包产品的品质。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;MX5上的乐动力 App 很早以前就不能登录了，各种途径都是提示“网络不给力”，等了大半年看他们是否会修正这个问题，但是每次版本更新后都试了，问题依旧存在。而且，无论是官网还是 App或是微博客服，都没有提供相关的说明该如何操作。&lt;br&gt;为了不丢失数据，只好自己动手了。&lt;/
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://blog.deskangel.com/categories/Programming/"/>
    
    
      <category term="php" scheme="https://blog.deskangel.com/tags/php/"/>
    
      <category term="charles" scheme="https://blog.deskangel.com/tags/charles/"/>
    
  </entry>
  
  <entry>
    <title>React with Node.js in Webstorm</title>
    <link href="https://blog.deskangel.com/2016/07/30/React-with-Node-js-in-Webstorm/"/>
    <id>https://blog.deskangel.com/2016/07/30/React-with-Node-js-in-Webstorm/</id>
    <published>2016-07-30T13:05:28.000Z</published>
    <updated>2020-04-20T08:45:01.955Z</updated>
    
    <content type="html"><![CDATA[<p>软件环境：</p><table><thead><tr><th>软件</th><th>版本</th></tr></thead><tbody><tr><td>OSX</td><td>10.11.6</td></tr><tr><td>WebStorm</td><td>2016.2</td></tr><tr><td>Node.js</td><td>6.3.1</td></tr><tr><td>React</td><td>15.3.1</td></tr></tbody></table><p>Node.js 是通过 nvm 安装的最新版本。国内的网络环境，想通过 WebStorm 直接创建工程是做不到的，只能通过命令行，使用淘宝的镜像。</p><h3 id="安装-express"><a href="#安装-express" class="headerlink" title="安装 express"></a>安装 express</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> reactStudy</span><br><span class="line">npm install --registry=https://registry.npm.taobao.org -g express-generator</span><br><span class="line">express -e -css sass reactStudy</span><br><span class="line"><span class="built_in">cd</span> reactStudy</span><br><span class="line">npm install --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h3 id="安装-react"><a href="#安装-react" class="headerlink" title="安装 react"></a>安装 react</h3><p>安装 react、react-dom、babel、browserify、watchify 等模块。package.json 文件的内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"taskmgr"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"0.0.0"</span>,</span><br><span class="line">  <span class="attr">"private"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"node ./bin/www"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"babel-cli"</span>: <span class="string">"^6.11.4"</span>,</span><br><span class="line">    <span class="attr">"babel-preset-es2015"</span>: <span class="string">"^6.9.0"</span>,</span><br><span class="line">    <span class="attr">"babel-preset-react"</span>: <span class="string">"^6.11.1"</span>,</span><br><span class="line">    <span class="attr">"babelify"</span>: <span class="string">"^7.3.0"</span>,</span><br><span class="line">    <span class="attr">"body-parser"</span>: <span class="string">"~1.15.1"</span>,</span><br><span class="line">    <span class="attr">"cookie-parser"</span>: <span class="string">"~1.4.3"</span>,</span><br><span class="line">    <span class="attr">"debug"</span>: <span class="string">"~2.2.0"</span>,</span><br><span class="line">    <span class="attr">"ejs"</span>: <span class="string">"~2.4.1"</span>,</span><br><span class="line">    <span class="attr">"express"</span>: <span class="string">"~4.13.4"</span>,</span><br><span class="line">    <span class="attr">"express-session"</span>: <span class="string">"^1.14.0"</span>,</span><br><span class="line">    <span class="attr">"morgan"</span>: <span class="string">"~1.7.0"</span>,</span><br><span class="line">    <span class="attr">"mysql"</span>: <span class="string">"^2.11.1"</span>,</span><br><span class="line">    <span class="attr">"node-sass-middleware"</span>: <span class="string">"0.8.0"</span>,</span><br><span class="line">    <span class="attr">"passport"</span>: <span class="string">"^0.3.2"</span>,</span><br><span class="line">    <span class="attr">"react"</span>: <span class="string">"^15.3.0"</span>,</span><br><span class="line">    <span class="attr">"react-dom"</span>: <span class="string">"^15.3.0"</span>,</span><br><span class="line">    <span class="attr">"serve-favicon"</span>: <span class="string">"~2.3.0"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"browserify"</span>: <span class="string">"^13.1.0"</span>,</span><br><span class="line">    <span class="attr">"watchify"</span>: <span class="string">"^3.7.0"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h3><p>在 views 目录下创建一个文件作为主文件：main.js。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> React = <span class="built_in">require</span>(<span class="string">'react'</span>);</span><br><span class="line"><span class="keyword">var</span> ReactDOM = <span class="built_in">require</span>(<span class="string">'react-dom'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Main = React.createClass(&#123;</span><br><span class="line"></span><br><span class="line">    render: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello william<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">    &lt;Main /&gt;,</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'content'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>也可以使用 ES2015的方式来写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span></span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">"react-dom"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">'content'</span>));</span><br></pre></td></tr></table></figure><h3 id="配置babel"><a href="#配置babel" class="headerlink" title="配置babel"></a>配置babel</h3><p>在<strong>WebStorm-&gt;Preferences…-&gt;Tools-&gt;File Watchers</strong>下添加Babel。以下字段需要注意修改：</p><p>Field | Value | 说明<br>—|—<br>Name | Babel | 这里不要修改，不然还会提示添加 Babel Watcher<br>File type | javascript | 也可以选其他类型，只要和你自己的文件匹配<br>Program | $ProjectFileDir$/node_modules/browserify/bin/cmd.js |<br>Arguments | -t [ babelify –presets [ es2015 react ] ] ./views/main.js -o public/javascripts/index.bundle.js | 如果要调试，需要加上 -d 参数</p><p>在<code>index.ejs</code>文件的下方添加</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/javascripts/index.bundle.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后的效果：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/javascripts/index.bundle.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>因为对 Babel 和 browserify 不熟悉，所以这一段是花时间最多的地方。开始的时候因为用了 jsx 扩展名，在文件头的注释中有<code>@jsx</code>，render 函数翻译出来的代码会带上 <code>file</code> 函数而不是<code>React.createElement</code>，导致错误。后来重启 WebStorm 就好了。</p><h3 id="结束"><a href="#结束" class="headerlink" title="结束."></a>结束.</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;软件环境：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;软件&lt;/th&gt;
&lt;th&gt;版本&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;OSX&lt;/td&gt;
&lt;td&gt;10.11.6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WebStorm&lt;/
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://blog.deskangel.com/categories/Programming/"/>
    
    
      <category term="node.js" scheme="https://blog.deskangel.com/tags/node-js/"/>
    
      <category term="webstorm" scheme="https://blog.deskangel.com/tags/webstorm/"/>
    
      <category term="react" scheme="https://blog.deskangel.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>Node.js from scratch</title>
    <link href="https://blog.deskangel.com/2016/04/18/Node-js-from-scratch/"/>
    <id>https://blog.deskangel.com/2016/04/18/Node-js-from-scratch/</id>
    <published>2016-04-18T08:48:55.000Z</published>
    <updated>2020-04-20T08:45:01.955Z</updated>
    
    <content type="html"><![CDATA[<p>使用 webstorm，从创建一个空白的工程开始构建一个 Node.js 的websocket服务器。</p><ol><li>创建空白工程</li><li>添加一个 js 文件，比如 main.js</li><li>添加一个 package.json 文件</li><li>在控制台中进入工程的根目录，使用命令<code>npm install --save ws</code>添加websocket模块。使用<code>--save</code>参数会把模块的依赖直接添加到 package.json 文件中。</li><li>编辑webstorm 的 Run/Debug配置，新建一个 Node.js 的配置，在 <code>JavaScript file:</code>这一栏里面写上<code>main.js</code>。</li><li>在 main.js 中填入如下代码：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> WebSocketServer = <span class="built_in">require</span>(<span class="string">'ws'</span>).Server;</span><br><span class="line"><span class="keyword">var</span> wss = <span class="keyword">new</span> WebSocketServer(&#123;<span class="attr">port</span>: <span class="number">8280</span>&#125;);</span><br><span class="line"></span><br><span class="line">wss.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span> <span class="title">connection</span>(<span class="params">ws</span>) </span>&#123;</span><br><span class="line">   ws.on(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span> <span class="title">incoming</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">'received: %s'</span>, message);</span><br><span class="line">   &#125;);</span><br><span class="line"></span><br><span class="line">    ws.send(<span class="string">'something'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>至此，一个服务器就搭建好了。</p><p>注意点：<br>在 webstorm 中，可能会提示<code>Unresolved function or method require()</code>，这是因为没有开启<code>Node.js Core library</code>。在 webstorm 的<code>Preferences-&gt;Languages &amp; Frameworks-&gt;Node.js and NPM</code>下开启就可以了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用 webstorm，从创建一个空白的工程开始构建一个 Node.js 的websocket服务器。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建空白工程&lt;/li&gt;
&lt;li&gt;添加一个 js 文件，比如 main.js&lt;/li&gt;
&lt;li&gt;添加一个 package.json 文件&lt;/li&gt;
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://blog.deskangel.com/categories/Programming/"/>
    
    
      <category term="node.js" scheme="https://blog.deskangel.com/tags/node-js/"/>
    
      <category term="webstorm" scheme="https://blog.deskangel.com/tags/webstorm/"/>
    
  </entry>
  
  <entry>
    <title>phpStorm remote debug with xdebug</title>
    <link href="https://blog.deskangel.com/2015/09/20/phpstorm-remote-debug-with-xdebug/"/>
    <id>https://blog.deskangel.com/2015/09/20/phpstorm-remote-debug-with-xdebug/</id>
    <published>2015-09-20T13:54:45.000Z</published>
    <updated>2020-04-20T08:45:01.959Z</updated>
    
    <content type="html"><![CDATA[<p>因为使用了 docker 进行了环境隔离，所以需要对 phpStorm 进行远程调试的配置。</p><p>网上有一些教程，不是太复杂就是已经过时。经过摸索，一下是完整的配置流程。</p><p>版本： ubuntu 14.04 LTS, phpStorm 9, php5-fpm</p><p>首先是服务器端的设置：</p><ol><li><p>安装xdebug </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install php5-xdebug</span><br></pre></td></tr></table></figure></li><li><p>配置 xdebug </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;php5&#x2F;fpm&#x2F;conf.d&#x2F;20-xdebug.ini</span><br></pre></td></tr></table></figure><p>加入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">zend_extension&#x3D;xdebug.so</span><br><span class="line">xdebug.remote_mode&#x3D;&quot;req&quot;</span><br><span class="line">xdebug.idekey&#x3D;&quot;PHPSTORM&quot;</span><br><span class="line">xdebug.remote_enable&#x3D;1</span><br><span class="line">xdebug.remote_connect_back&#x3D;1</span><br></pre></td></tr></table></figure><p>上面的设置也可以直接放在 php.ini 中。</p></li></ol><p>接下来进行客户端的设置：</p><ol start="3"><li>点击phpStorm菜单<code>Run -&gt; Start Listening for PHP Debug Connections</code></li><li>设置断点</li><li>安装 xdebug-helper  Chrome 浏览器插件</li><li>打开要调试的网页，激活地址栏的 xdebug-helper</li><li>如果一切都设置正确，在 phpStorm 会弹出对话框进行文件映射等设置。</li></ol><p>这样就可以了。</p><p>PS：<br>如果在 phpStorm 中创建 Remote debug 配置，也是可以收到 debug 断点的。</p><p>如果是apache2，xdebug 的默认配置文件会出现在 <code>/etc/php5modes-available/xdebug.ini</code></p><p><strong>UPDATE</strong><br>如果web 服务器是在<code>Docker for Mac</code>下使用的话，<code>xdebug.remote_connect_back=1</code>会不起作用，因为这里的 docker container 接受到的 ip 都是来自<code>172.17.0.1</code>，所以需要显式的指定 ip 和端口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">zend_extension&#x3D;xdebug.so</span><br><span class="line">xdebug.remote_mode&#x3D;&quot;req&quot;</span><br><span class="line">xdebug.idekey&#x3D;&quot;PHPSTORM&quot;</span><br><span class="line">xdebug.remote_enable&#x3D;1</span><br><span class="line">xdebug.remote_host&#x3D;&quot;192.168.1.22&quot;</span><br><span class="line">xdebug.remote_port&#x3D;9000</span><br><span class="line">xdebug.remote_connect_back&#x3D;0</span><br></pre></td></tr></table></figure><p>这里的嗯<code>Docker for Mac</code>的版本是 v1.12，之后是否会修复这个问题，不得而知。<br>————2016.08.21</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;因为使用了 docker 进行了环境隔离，所以需要对 phpStorm 进行远程调试的配置。&lt;/p&gt;
&lt;p&gt;网上有一些教程，不是太复杂就是已经过时。经过摸索，一下是完整的配置流程。&lt;/p&gt;
&lt;p&gt;版本： ubuntu 14.04 LTS, phpStorm 9, php5-
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://blog.deskangel.com/categories/Programming/"/>
    
    
      <category term="php" scheme="https://blog.deskangel.com/tags/php/"/>
    
      <category term="phpStorm" scheme="https://blog.deskangel.com/tags/phpStorm/"/>
    
      <category term="xdebug" scheme="https://blog.deskangel.com/tags/xdebug/"/>
    
  </entry>
  
  <entry>
    <title>搞定 osx 下 virtualbox 中的 docker container 访问共享文件夹的权限问题</title>
    <link href="https://blog.deskangel.com/2015/09/13/osx-virtualbox-shared-folder-permission-issue/"/>
    <id>https://blog.deskangel.com/2015/09/13/osx-virtualbox-shared-folder-permission-issue/</id>
    <published>2015-09-13T13:22:23.000Z</published>
    <updated>2020-04-20T08:45:01.959Z</updated>
    
    <content type="html"><![CDATA[<p>案例是这样的：</p><ul><li>有一台 osx 系统</li><li>安装了 virtualbox 虚拟机</li><li>在虚拟机里面装 Linux</li><li>在 Linux 里面装了 docker</li><li>用 docker 装了 Ubuntu 的 image</li><li>在 Ubuntu 的 container 中装了 nginx</li></ul><p>现在把OSX 下的一个 web 开发文件夹共享给 virtualbox下的 Linux，然后在通过 docker 映射到 container 下，nginx 的 root 目录指向这个文件夹，提供 web 服务。</p><p>但是问题来了，nginx 会报错说“permission denied”。在 container 下可以很明显的看到，共享文件夹中的内容是存放在了<code>999</code>这个 group 中。</p><p>分析一下原因，根源在于 virtualbox 从某一个版本开始，无法修改 osx 共享目录的权限了。可以看到，在 virtualbox 下的 Linux 中，共享文件夹的权限在一个叫做<code>vboxsf</code>的 group 下面。</p><p>以下是解决方法：</p><ul><li>在 container 下创建一个叫做<code>vboxsf</code>的 group： <code>groupadd vboxsf</code></li><li>修改这个 group 的 id 为999：<code>vim /etc/group</code></li><li>把 www-data 这个用户加入到<code>vboxsf</code>中：<code>usermod -a -G vboxsf www-data</code></li><li>重启 nginx：<code>service nginx restart</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;案例是这样的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有一台 osx 系统&lt;/li&gt;
&lt;li&gt;安装了 virtualbox 虚拟机&lt;/li&gt;
&lt;li&gt;在虚拟机里面装 Linux&lt;/li&gt;
&lt;li&gt;在 Linux 里面装了 docker&lt;/li&gt;
&lt;li&gt;用 docker 装了 Ubun
      
    
    </summary>
    
    
      <category term="Software" scheme="https://blog.deskangel.com/categories/Software/"/>
    
    
      <category term="docker" scheme="https://blog.deskangel.com/tags/docker/"/>
    
      <category term="linux" scheme="https://blog.deskangel.com/tags/linux/"/>
    
      <category term="osx" scheme="https://blog.deskangel.com/tags/osx/"/>
    
      <category term="virtualbox" scheme="https://blog.deskangel.com/tags/virtualbox/"/>
    
  </entry>
  
  <entry>
    <title>java压缩，javascript 解压缩总结</title>
    <link href="https://blog.deskangel.com/2015/06/06/java-compress-javascript-uncompress/"/>
    <id>https://blog.deskangel.com/2015/06/06/java-compress-javascript-uncompress/</id>
    <published>2015-06-06T09:05:30.000Z</published>
    <updated>2020-04-20T08:45:01.955Z</updated>
    
    <content type="html"><![CDATA[<p>这里描述如何在 client 端使用 javascript 处理通过 ajax 调用返回的压缩数据。服务器端使用java 的<code>DeflaterOutputStream</code>来进行数据的压缩。</p><p>最早尝试使用<code>jquery</code>的<code>$.ajax</code>方法来做 ajax 调用，但是其返回的数据都是字符串类型的，部分字节被强制转换了，导致这部分数据无法正确的解码。</p><p><em>如果仔细观察，浏览器的开发者模式中<code>Response</code>页面得到的数据格式是正常的，但是在 <code>success: function (data)</code>中数据是不正确的。</em></p><h4 id="接收字节流而不是字符串"><a href="#接收字节流而不是字符串" class="headerlink" title="接收字节流而不是字符串"></a>接收字节流而不是字符串</h4><p>所以，如果需要 ajax 能够接收字节流而仅仅是字符串，需要使用 <code>XMLHttpRequest</code>自己来实现，v1和 v2都可以，下面给出的代码使用 v2的特性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajaxRequest</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> request = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    request.open(data.type, data.url, <span class="literal">true</span>);</span><br><span class="line">    request.responseType = <span class="string">"arraybuffer"</span>;</span><br><span class="line">    request.setRequestHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/x-www-form-urlencoded; charset=UTF-8"</span>);</span><br><span class="line">    request.onload = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (data.success) &#123;</span><br><span class="line">            data.success(request.response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    request.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (data.error) &#123;</span><br><span class="line">            data.error(request.response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    request.send(data.data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用的代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> szActionUrl = http_host + path;</span><br><span class="line"><span class="keyword">var</span> content = <span class="string">"userName="</span> + userName + <span class="string">"&amp;password="</span> + password;</span><br><span class="line">ajaxRequest(&#123;</span><br><span class="line">    url: szActionUrl,</span><br><span class="line">    type: <span class="string">"POST"</span>,</span><br><span class="line">    data: content,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"success"</span>);</span><br><span class="line">        decodeToJson(data);</span><br><span class="line">    &#125;,</span><br><span class="line">    error: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"failed"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="解压缩"><a href="#解压缩" class="headerlink" title="解压缩"></a>解压缩</h4><p>解压缩使用的是 <a href="https://github.com/imaya/zlib.js" target="_blank" rel="noopener">zlib</a>，在使用前先加入引用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">"JavaScript"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"zlip/inflate.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>javascript 的代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uintToString</span>(<span class="params">uintArray</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> encodedString = <span class="built_in">String</span>.fromCharCode.apply(<span class="literal">null</span>, uintArray);</span><br><span class="line">    <span class="keyword">var</span> decodedString = <span class="built_in">decodeURIComponent</span>(<span class="built_in">escape</span>(encodedString));</span><br><span class="line">    <span class="keyword">return</span> decodedString;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">decodeToJson</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> uintArray = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(data);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> inflate = <span class="keyword">new</span> Zlib.Inflate(uintArray);</span><br><span class="line">    <span class="keyword">var</span> plainArray = inflate.decompress();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> s = uintToString(plainArray);</span><br><span class="line">    <span class="built_in">console</span>.log(s);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> result = <span class="built_in">JSON</span>.parse(s);</span><br><span class="line">    <span class="keyword">return</span> result;      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中的<code>uintToString</code>是用来把 <code>Uint8Array</code>转换成字符串，<code>decodeURIComponent</code>可以正确的处理 utf-8编码的字符。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这里描述如何在 client 端使用 javascript 处理通过 ajax 调用返回的压缩数据。服务器端使用java 的&lt;code&gt;DeflaterOutputStream&lt;/code&gt;来进行数据的压缩。&lt;/p&gt;
&lt;p&gt;最早尝试使用&lt;code&gt;jquery&lt;/code&gt;
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://blog.deskangel.com/categories/Programming/"/>
    
    
      <category term="java" scheme="https://blog.deskangel.com/tags/java/"/>
    
      <category term="javascript" scheme="https://blog.deskangel.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>sftp用户创建与设置</title>
    <link href="https://blog.deskangel.com/2015/04/29/sftp-user-creat-and-config/"/>
    <id>https://blog.deskangel.com/2015/04/29/sftp-user-creat-and-config/</id>
    <published>2015-04-29T10:19:16.000Z</published>
    <updated>2020-04-20T08:45:01.955Z</updated>
    
    <content type="html"><![CDATA[<p>环境：ubuntu server 14.04<br>目的：用户只能通过 sftp 访问指定目录，并且不能登录 shell</p><p>网上有很多这方面的介绍，最有价值的是<a href="http://solderintheveins.co.uk/2011/03/ubuntu-sftp-only-account-how-to/" target="_blank" rel="noopener">这里</a>。但是按照这篇文档还是遇到了两个坑：</p><ol><li>配置没有加载</li><li>sshd 无法正常启动</li></ol><p>这并不能说是参考文章，只是它没有提到而已。解决方法在下面会以<em>斜体</em>的字体表明。</p><p>下面是需要的步骤；</p><h5 id="创建用户组"><a href="#创建用户组" class="headerlink" title="创建用户组"></a>创建用户组</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo addgroup sftponly</span><br></pre></td></tr></table></figure><p>之后将通过用户组来控制权限，所以创建一个新的用户组是有必要的。</p><h5 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo useradd -d /home/bob -s /usr/lib/sftp-server -M -N -g sftponly bob</span><br></pre></td></tr></table></figure><p>把新用户 bob 加入到 sftponly 这个用户组。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd bob</span><br></pre></td></tr></table></figure><p>为新用户 bob 设置密码。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo "/usr/lib/sftp-server" &gt;&gt; /etc/shells</span><br></pre></td></tr></table></figure><p>把 sftp-server 作为一个 shell 加入到 shell 列表。</p><h5 id="创建用户目录"><a href="#创建用户目录" class="headerlink" title="创建用户目录"></a>创建用户目录</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /home/bob/uploads</span><br><span class="line">sudo chown bob:sftponly /home/bob/uploads</span><br></pre></td></tr></table></figure><p>为新用户创建 home 目录和 sftp 目录，并设置所有权。<br><em>需要注意的一点是，/home/bob 目录的 owner 需要是 root，权限最好是755</em></p><h5 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p>打开 sshd_config 配置文件，把 <code>Subsystem sftp /usr/lib/openssh/sftp-server</code> 注释掉，在下面加上 <code>Subsystem sftp internal-sftp</code>。</p><p>在<em>最后一行</em>添加上：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Match group sftponly</span><br><span class="line">    ChrootDirectory %h</span><br><span class="line">    X11Forwarding no</span><br><span class="line">    AllowTcpForwarding no</span><br><span class="line">    ForceCommand internal-sftp</span><br></pre></td></tr></table></figure><p><em>注意：上面的代码一定要加在最有一行，否则 sshd 会无法启动</em></p><h5 id="重启-sshd"><a href="#重启-sshd" class="headerlink" title="重启 sshd"></a>重启 sshd</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service ssh restart</span><br></pre></td></tr></table></figure><p><em>注意：参考中使用<code>sudo /etc/init.d/ssh restart</code>来重启 sshd，没有任何的效果。</em></p><p>当使用 service 来重新启动的时候，如果正常会显示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh stop/waiting</span><br><span class="line">ssh start/running, process 12760</span><br></pre></td></tr></table></figure><p>如果出错，则只会显示</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh stop/waiting</span><br><span class="line">ssh start/running</span><br></pre></td></tr></table></figure><p>`</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;环境：ubuntu server 14.04&lt;br&gt;目的：用户只能通过 sftp 访问指定目录，并且不能登录 shell&lt;/p&gt;
&lt;p&gt;网上有很多这方面的介绍，最有价值的是&lt;a href=&quot;http://solderintheveins.co.uk/2011/03/ubun
      
    
    </summary>
    
    
      <category term="Software" scheme="https://blog.deskangel.com/categories/Software/"/>
    
    
      <category term="ubuntu" scheme="https://blog.deskangel.com/tags/ubuntu/"/>
    
      <category term="sftp" scheme="https://blog.deskangel.com/tags/sftp/"/>
    
  </entry>
  
  <entry>
    <title>docker之程序员系列 （一）</title>
    <link href="https://blog.deskangel.com/2015/04/23/docker-for-programmer/"/>
    <id>https://blog.deskangel.com/2015/04/23/docker-for-programmer/</id>
    <published>2015-04-22T18:47:57.000Z</published>
    <updated>2020-04-20T08:45:01.955Z</updated>
    
    <content type="html"><![CDATA[<p><em>因为我主要使用 ubuntu 做服务器，所以以下的操作都是在 ubuntu server 14.04下进行。</em></p><h4 id="OSX-下的选择"><a href="#OSX-下的选择" class="headerlink" title="OSX 下的选择"></a>OSX 下的选择</h4><p>虽然官方提供了一个工具（<a href="https://github.com/boot2docker/boot2docker" target="_blank" rel="noopener">boot2docker</a>），但是说到底，它其实也是在 OSX 下使用 virtualbox 虚拟了一个 linux 出来，然后再在 linux 下进行 docker 操作。那么对于我这样的凡事都希望清晰、简单的人来说，第一选择肯定不会使用这个工具，而是会选择从头开始。如果你和我一样，那么我们需要下面这几样东西：</p><ol><li>virtualbox</li><li>ubuntu server 14.04</li></ol><p>linux 安装完成之后，为了更好的使用，你需要知道几件关于 virtualbox 的事情：</p><ol><li>如何映射端口</li><li>在命令行启动虚拟机</li></ol><p>映射端口在 virtualbox 的gui 界面中就可以简单的完成。下面我贴出命令行启动和保存虚拟机的代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VBoxManage startvm Ubuntu --<span class="built_in">type</span> headless</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VBoxManage controlvm Ubuntu savestate</span><br></pre></td></tr></table></figure><h4 id="Ubuntu-下-docker-安装和配置"><a href="#Ubuntu-下-docker-安装和配置" class="headerlink" title="Ubuntu 下 docker 安装和配置"></a>Ubuntu 下 docker 安装和配置</h4><p>docker 安装和配置和其他程序没有什么两样。使用<em>apt-get</em>进行安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get udpate</span><br><span class="line">sudo apt-get install docker.io</span><br></pre></td></tr></table></figure><p>此时 docker 的每次运行都需要加上前缀<strong>sudo</strong>，比较麻烦。可以进行如下的处理：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo groupadd docker</span><br><span class="line">sudo gpasswd -a <span class="variable">$&#123;USER&#125;</span> docker</span><br></pre></td></tr></table></figure><p>其中，<em>USER</em>替换成 ubuntu 的当前用户。具体可以参考 <a href="http://askubuntu.com/questions/477551/how-can-i-use-docker-without-sudo" target="_blank" rel="noopener">askubuntu.com</a>。</p><h4 id="第一个-image"><a href="#第一个-image" class="headerlink" title="第一个 image"></a>第一个 image</h4><p>现在我们需要一个 image。这里也有几种选择：</p><ol><li>从网上下载。如果网络速度比较快的话，可以使用下面的命令从 docker 官方库中搜索并拉一个 image 下来： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker search ubuntu</span><br><span class="line">docker pull ubuntu</span><br></pre></td></tr></table></figure></li><li>自己做一个</li></ol><p>如果你选择自己做一个，也是有多个选择，但这里我选择简单一点，使用 debootstrap 工具。而使用这个工具，不需要一个参数一个参数自己输入，docker 官方提供了一个脚本<code>mkimage.sh</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/docker/docker.git</span><br><span class="line"><span class="built_in">cd</span> docker</span><br><span class="line">./mkimage.sh</span><br></pre></td></tr></table></figure><p>按照提示进行即可。</p><h4 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h4><p>现在我们有了一个baseimage，在我们启动它之前，我们可以给它打一个 tag。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看当前用于的 image</span></span><br><span class="line">docker images</span><br><span class="line"><span class="comment"># 给 image 打 tag，格式为[repository[:tag]]</span></span><br><span class="line">docker tag &lt;image_id&gt; ubuntu:14.04</span><br></pre></td></tr></table></figure><p>当我们拥有多个 image 之后，可以很容易的通过 tag 来识别各自的用处。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运行这个 dock</span></span><br><span class="line">docker run -it --name first ubuntu:14.04</span><br></pre></td></tr></table></figure><p>这样就启动了一个容器，把这个容器命名为 first，并且获得一个控制台。</p><h4 id="保存修改"><a href="#保存修改" class="headerlink" title="保存修改"></a>保存修改</h4><p>容器的一大优势就是很方便的丢弃一些数据和状态。如果你只是临时性的运行一下程序，验证一些想法，容器是非常方便的。当退出并且删除容器之后，所有的数据都会被抛弃。<br>但是当你需要保存数据或是状态，那么需要显示的进行保存。docker 的一些概念和 git 相似，这里也是通过 commit 来保存容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit first tag</span><br></pre></td></tr></table></figure><p>tag可以是原来的 image 的 tag，也可以是一个新的 tag。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;em&gt;因为我主要使用 ubuntu 做服务器，所以以下的操作都是在 ubuntu server 14.04下进行。&lt;/em&gt;&lt;/p&gt;
&lt;h4 id=&quot;OSX-下的选择&quot;&gt;&lt;a href=&quot;#OSX-下的选择&quot; class=&quot;headerlink&quot; title=&quot;OSX 下
      
    
    </summary>
    
    
      <category term="Software" scheme="https://blog.deskangel.com/categories/Software/"/>
    
    
      <category term="docker" scheme="https://blog.deskangel.com/tags/docker/"/>
    
      <category term="linux" scheme="https://blog.deskangel.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>blog 从 Dreamhost 搬到了 Linode</title>
    <link href="https://blog.deskangel.com/2015/04/18/Blog-moved/"/>
    <id>https://blog.deskangel.com/2015/04/18/Blog-moved/</id>
    <published>2015-04-18T12:03:51.000Z</published>
    <updated>2020-04-20T08:45:01.955Z</updated>
    
    <content type="html"><![CDATA[<p>Dreamhost 从国内访问越来越差，速度慢不说，有时候还连不上。</p><p>除此之外，每月$8.5的共享服务器在价格方面也完全没有优势，没有 root 权限，很多东西都无法操作。</p><p>而且，虽然他们说硬盘大小是没有限制的，但是上次放了多一点东西就发邮件过来要求删除，说什么不能作为备份用途云云。</p><p>早有打算换一个服务商，只是一直没有找到合适的。这次买了 Linode 的 vps就把 blog 和 web 以及 git 都搬了过来。blog 也从 wordpress 换成了 <a href="http://hexo.io" target="_blank" rel="noopener">hexo</a>。因为 vps 上有足够的权限，分别做了 php 和 nginx 两个 docker 来支持这些服务。</p><p>Dreamhost 上现在只留下了域名服务，以后发现有更优惠的域名服务商之后再迁移出来。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Dreamhost 从国内访问越来越差，速度慢不说，有时候还连不上。&lt;/p&gt;
&lt;p&gt;除此之外，每月$8.5的共享服务器在价格方面也完全没有优势，没有 root 权限，很多东西都无法操作。&lt;/p&gt;
&lt;p&gt;而且，虽然他们说硬盘大小是没有限制的，但是上次放了多一点东西就发邮件过来
      
    
    </summary>
    
    
      <category term="Information" scheme="https://blog.deskangel.com/categories/Information/"/>
    
    
  </entry>
  
  <entry>
    <title>Pomelo开发环境搭建之 Docker</title>
    <link href="https://blog.deskangel.com/2015/02/01/pomelo-dev-env-with-docker/"/>
    <id>https://blog.deskangel.com/2015/02/01/pomelo-dev-env-with-docker/</id>
    <published>2015-02-01T13:15:50.000Z</published>
    <updated>2020-04-20T08:45:01.955Z</updated>
    
    <content type="html"><![CDATA[<p>因为不想把当前的 osx 的环境弄得更复杂以及想实战一下docker，所以选择了在docker下搭建pomelo 的开发环境，大致的过程如下：</p><h4 id="一-安装"><a href="#一-安装" class="headerlink" title="一. 安装"></a>一. 安装</h4><ol><li>安装 VirtualBox</li><li>在 VirtualBox 安装 Ubuntu server</li><li>在 Ubuntu 下安装 docker</li><li>在 docker 下下载 Ubuntu image</li><li>运行 Ubuntu image，下载各种工具</li><li>根据文档安装 pomelo</li></ol><h4 id="二-配置"><a href="#二-配置" class="headerlink" title="二. 配置"></a>二. 配置</h4><ol><li>在 VirtualBox 中映射 Ubuntu 到 OSX 的 ssh 端口</li><li>在 VirtualBox 中映射 Ubuntu 到 OSX 的 pomelo 需要的端口</li><li>在 docker 下映射 Ubuntu container 到 Ubuntu host 的 pomelo 需要的端口</li></ol><h4 id="三-文件"><a href="#三-文件" class="headerlink" title="三. 文件"></a>三. 文件</h4><ol><li>在 VirtualBox 中设置 OSX 到 Ubuntu 的共享文件夹</li><li>在 docker 下把 Ubuntu host 中的共享文件夹映射到 Ubuntu container</li></ol><h4 id="四-调试"><a href="#四-调试" class="headerlink" title="四. 调试"></a>四. 调试</h4><ol><li>安装node-inspector，并指定web-port和 debug-port</li><li>编辑 pomelo 的工程中的 servers.json，为需要调试的服务器指定调试端口</li><li>在 Chrome 中按照node-inspector 的提示打开调试的 url</li></ol><h4 id="五-问题"><a href="#五-问题" class="headerlink" title="五. 问题"></a>五. 问题</h4><ol><li>安装 pomelo 的时候花了很多时间，有些包比如 heapdump 总是出错，后来发现是没有安装 make 和 g++等开发工具</li><li>在 container 中用命令创建 pomelo 工程后在 OSX 下无法保存，发现是因为权限的问题。一个方法是在 container 中把目录和文件都改成 other 可写，另一个方法是在 OSX 下把 container 中创建的工程复制一份，把原来的工程目录删除即可</li><li>服务器指定调试端口（3005）后一直没有办法连上，Chrome 中也看不到工程的文件，此时换一个调试端口即可</li><li>在 container 中需要运行 node-inspector、server、client 以及其他的命令，但是只有一个控制台，解决的办法一个是把命令运行到后台，另一个安装 tmux</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;因为不想把当前的 osx 的环境弄得更复杂以及想实战一下docker，所以选择了在docker下搭建pomelo 的开发环境，大致的过程如下：&lt;/p&gt;
&lt;h4 id=&quot;一-安装&quot;&gt;&lt;a href=&quot;#一-安装&quot; class=&quot;headerlink&quot; title=&quot;一. 安装
      
    
    </summary>
    
    
      <category term="Software" scheme="https://blog.deskangel.com/categories/Software/"/>
    
    
      <category term="docker" scheme="https://blog.deskangel.com/tags/docker/"/>
    
      <category term="osx" scheme="https://blog.deskangel.com/tags/osx/"/>
    
      <category term="pomelo" scheme="https://blog.deskangel.com/tags/pomelo/"/>
    
  </entry>
  
  <entry>
    <title>Quick-cocos2d-x 接入 protobuf</title>
    <link href="https://blog.deskangel.com/2014/12/11/quick-cocos2d-x-with-protobuf/"/>
    <id>https://blog.deskangel.com/2014/12/11/quick-cocos2d-x-with-protobuf/</id>
    <published>2014-12-10T16:53:17.000Z</published>
    <updated>2020-04-20T08:45:01.955Z</updated>
    
    <content type="html"><![CDATA[<ol><li>下载云风的 pbc：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:cloudwu&#x2F;pbc.git</span><br></pre></td></tr></table></figure>把 pbc 下 src 目录复制到 quick 的 lua_extensions 目录下，并重命名为 pbc。</li><li>下载 lpeg，并同样复制到 lua_extensions 下</li><li>下载 struct，并同样复制到 lua_extensions 下</li><li>编辑 lua_extensions\lua_extensions[_more].c 文件，添加：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// protobuf</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"pbc/pbc-lua.h"</span></span></span><br><span class="line"><span class="comment">// lpeg</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"lpeg/lptree.h"</span></span></span><br><span class="line"><span class="comment">// struct</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"struct/struct.h"</span></span></span><br><span class="line">... ...    <span class="keyword">static</span> luaL_Reg luax_exts[] = &#123;</span><br><span class="line">... ...</span><br><span class="line">    &#123;<span class="string">"lpeg"</span>, luaopen_lpeg&#125;,</span><br><span class="line">    &#123;<span class="string">"struct"</span>, luaopen_struct&#125;,</span><br><span class="line">    &#123;<span class="string">"protobuf.c"</span>, luaopen_protobuf_c&#125;,</span><br><span class="line">... ...</span><br></pre></td></tr></table></figure></li><li>把 pbc，lpeg，struct 目录加入到 xcode 的工程中。比如游戏工程或是 quick-player 的工程</li><li>编译项目。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;下载云风的 pbc：&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;c
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://blog.deskangel.com/categories/Programming/"/>
    
    
      <category term="quick cocos2d" scheme="https://blog.deskangel.com/tags/quick-cocos2d/"/>
    
  </entry>
  
  <entry>
    <title>使用 Cocostudio 创建 listview item</title>
    <link href="https://blog.deskangel.com/2014/11/30/cocostudio-create-listview-item/"/>
    <id>https://blog.deskangel.com/2014/11/30/cocostudio-create-listview-item/</id>
    <published>2014-11-29T22:20:46.000Z</published>
    <updated>2020-04-20T08:45:01.955Z</updated>
    
    <content type="html"><![CDATA[<p>为了快速开发一个小游戏，使用了 Cocostudio 2.0 作为 UI 编辑器。其实 Cocostudio 的功能比较弱，特别是针对稍微复杂一点的控件（Widget），无法做到所见即所得，不得不写一些代码。</p><p>游戏中用到了一个 listview，但是 Cocostudio2.0中没有 listview，所以只能写代码实现，这个是没有办法的。好在一个 listview 本身还是比较简单的，但是 listview 中的 item 可以很复杂，是否有办法简化呢？</p><p>尝试了很久之后，还真找到了一个迂回的方法，即：</p><ul><li>在 Cocostudio 中创建一个新的 Layer</li><li>在 Layer 上编辑所需要的 item</li></ul><p>这本来是一件比较简单的事情，但是问题在于 listview 的 item 只能是 widget，而 Cocostudio 2.0中 widget 有限，所以，尽量用 button 拼凑吧！</p><p>放出 listview 和 listitem 的 lua 代码：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> LISTVIEW_WIDTH = <span class="number">340</span></span><br><span class="line"><span class="keyword">local</span> LISTVIEW_HEIGHT = <span class="number">405</span></span><br><span class="line"><span class="keyword">local</span> listView = ccui.ListView:<span class="built_in">create</span>()</span><br><span class="line"><span class="comment">-- set list view ex direction</span></span><br><span class="line">listView:setDirection(ccui.ScrollViewDir.vertical)</span><br><span class="line">listView:setBounceEnabled(<span class="literal">true</span>)</span><br><span class="line"><span class="comment">-- listView:setBackGroundImage("hall/di.png")</span></span><br><span class="line"><span class="comment">-- listView:setBackGroundImageScale9Enabled(true)</span></span><br><span class="line">listView:setContentSize(cc.size(LISTVIEW_WIDTH, LISTVIEW_HEIGHT))</span><br><span class="line">listView:setAnchorPoint(cc.p(<span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">listView:setPosition(cc.p(<span class="number">10</span>, <span class="number">12</span>))</span><br><span class="line">listView:addEventListener(listViewEvent)</span><br><span class="line"><span class="comment">-- SCISSOR</span></span><br><span class="line">listView:setClippingType(<span class="number">1</span>)</span><br><span class="line">parent:addChild(listView)</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">createDefaultListItem</span><span class="params">()</span></span></span><br><span class="line"><span class="keyword">local</span> leaderboardItemLayer =                 cc.CSLoader:createNode(<span class="string">"hall/LeaderboardItem.csb"</span>)</span><br><span class="line"><span class="comment">-- retrieve the widget. MUST be a widget</span></span><br><span class="line"><span class="keyword">local</span> listItemRoot = leaderboardItemLayer:getChildByTag(<span class="number">2001</span>)</span><br><span class="line">listItemRoot:removeFromParent()</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> listItemRootSize = listItemRoot:getContentSize()</span><br><span class="line">listItemRoot:setPosition(cc.p(LISTVIEW_WIDTH / <span class="number">2.0</span>, listItemRootSize.height / <span class="number">2.0</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> default_item = ccui.Layout:<span class="built_in">create</span>()</span><br><span class="line">default_item:setTouchEnabled(<span class="literal">true</span>)</span><br><span class="line">default_item:setContentSize(listItemRootSize)</span><br><span class="line">default_item:addChild(listItemRoot)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> default_item</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> default_item = createDefaultListItem()</span><br><span class="line">listView:setItemModel(default_item)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i = <span class="number">1</span>, <span class="number">100</span> <span class="keyword">do</span></span><br><span class="line">listView:pushBackDefaultItem()</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- set all items layout gravity</span></span><br><span class="line">listView:setGravity(ccui.ListViewGravity.centerVertical)</span><br><span class="line"></span><br><span class="line"><span class="comment">--set items margin</span></span><br><span class="line">listView:setItemsMargin(<span class="number">2.0</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;为了快速开发一个小游戏，使用了 Cocostudio 2.0 作为 UI 编辑器。其实 Cocostudio 的功能比较弱，特别是针对稍微复杂一点的控件（Widget），无法做到所见即所得，不得不写一些代码。&lt;/p&gt;
&lt;p&gt;游戏中用到了一个 listview，但是 Coco
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://blog.deskangel.com/categories/Programming/"/>
    
    
      <category term="cocos2d" scheme="https://blog.deskangel.com/tags/cocos2d/"/>
    
      <category term="cocostudio" scheme="https://blog.deskangel.com/tags/cocostudio/"/>
    
  </entry>
  
</feed>
